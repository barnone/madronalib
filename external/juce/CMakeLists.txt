cmake_minimum_required(VERSION 2.8.12)
project(JUCE)

if(NOT ML_JUCE_DIR)
  set(ML_JUCE_DIR "${CMAKE_CURRENT_LIST_DIR}/JUCE")
endif()

target_include_directories(madronalib PUBLIC "${ML_JUCE_DIR}")

if(NOT ML_JUCE_HEADER_PATH)
  message(FATAL_ERROR "Madronalib requires ML_JUCE_HEADER_PATH to be set")
endif()

macro(add_juce_library LIB EXTENSION)
  add_library(${LIB}
    "${ML_JUCE_DIR}/modules/${LIB}/${LIB}.h"
    "${ML_JUCE_DIR}/modules/${LIB}/${LIB}.${EXTENSION}")
  target_include_directories(${LIB} PUBLIC ${ML_JUCE_HEADER_PATH})
  target_include_directories(${LIB} PUBLIC ${ML_JUCE_DIR})
endmacro()

if(APPLE)
  set(ML_FILE_EXTENSION mm)
else(APPLE)
  set(ML_FILE_EXTENSION cpp)
endif()

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

if(NOT APPLE)
  find_package(X11 REQUIRED)
  find_package(Freetype REQUIRED)
  find_package(OpenGL REQUIRED)
  find_package(XRandR REQUIRED)
  find_package(Xinerama REQUIRED)
  find_package(Xcursor REQUIRED)
  find_package(ALSA REQUIRED)

  if(NOT XRANDR_LIBRARY)
    message(FATAL_ERROR "Could not find the xrandr library")
  endif()
endif()

add_juce_library(juce_audio_basics ${ML_FILE_EXTENSION})
if(APPLE)
  target_link_libraries(juce_audio_basics "-framework Accelerate")
endif()
target_link_libraries(juce_audio_basics juce_core)

add_juce_library(juce_audio_devices ${ML_FILE_EXTENSION})
if(APPLE)
  target_link_libraries(juce_audio_devices "-framework AudioToolbox")
  target_link_libraries(juce_audio_devices "-framework CoreAudio")
  target_link_libraries(juce_audio_devices "-framework CoreMIDI")
else()
  target_link_libraries(juce_audio_devices ${ALSA_LIBRARIES})
endif()
target_link_libraries(juce_audio_devices juce_events)
target_link_libraries(juce_audio_devices juce_audio_basics)
target_link_libraries(juce_audio_devices juce_audio_formats)

add_juce_library(juce_audio_formats ${ML_FILE_EXTENSION})
target_link_libraries(juce_audio_formats juce_audio_basics)

add_juce_library(juce_audio_processors ${ML_FILE_EXTENSION})
target_link_libraries(juce_audio_processors juce_gui_extra)
target_link_libraries(juce_audio_processors juce_audio_basics)

add_juce_library(juce_audio_utils ${ML_FILE_EXTENSION})
target_link_libraries(juce_audio_utils juce_gui_basics)
target_link_libraries(juce_audio_utils juce_audio_devices)
target_link_libraries(juce_audio_utils juce_audio_processors)
target_link_libraries(juce_audio_utils juce_audio_formats)

add_juce_library(juce_box2d cpp)
target_link_libraries(juce_box2d juce_graphics)

add_juce_library(juce_core ${ML_FILE_EXTENSION})
if(NOT APPLE)
  target_link_libraries(juce_core dl)
  target_link_libraries(juce_core pthread)
endif()

add_juce_library(juce_cryptography ${ML_FILE_EXTENSION})
target_link_libraries(juce_cryptography juce_core)

add_juce_library(juce_data_structures ${ML_FILE_EXTENSION})
target_link_libraries(juce_data_structures juce_core)
target_link_libraries(juce_data_structures juce_events)

add_juce_library(juce_events ${ML_FILE_EXTENSION})
target_link_libraries(juce_events juce_core)
if(NOT APPLE)
  target_link_libraries(juce_events X11)
endif()

add_juce_library(juce_graphics ${ML_FILE_EXTENSION})
if(APPLE)
  target_link_libraries(juce_graphics "-framework CoreGraphics")
  target_link_libraries(juce_graphics "-framework CoreText")
  target_link_libraries(juce_graphics "-framework Cocoa")
  target_link_libraries(juce_graphics "-framework QuartzCore")
else(APPLE)
  target_link_libraries(juce_graphics ${FREETYPE_LIBRARIES})
  target_include_directories(juce_graphics PRIVATE ${FREETYPE_INCLUDE_DIRS})
endif()
target_link_libraries(juce_graphics juce_core)
target_link_libraries(juce_graphics juce_events)

add_juce_library(juce_gui_basics ${ML_FILE_EXTENSION})
if(APPLE)
  target_link_libraries(juce_gui_basics "-framework CoreGraphics")
endif()
target_link_libraries(juce_gui_basics juce_data_structures)
target_link_libraries(juce_gui_basics juce_events)
target_link_libraries(juce_gui_basics juce_graphics)
target_link_libraries(juce_gui_basics juce_core)

add_juce_library(juce_gui_extra ${ML_FILE_EXTENSION})
if(APPLE)
  target_link_libraries(juce_graphics "-framework WebKit")
endif()
target_link_libraries(juce_gui_extra juce_gui_basics)

add_juce_library(juce_opengl ${ML_FILE_EXTENSION})
target_link_libraries(juce_opengl juce_gui_basics)
if(APPLE)
  target_link_libraries(juce_opengl "-framework OpenGL")
else(APPLE)
  target_link_libraries(juce_opengl ${OPENGL_LIBRARIES})
endif()

